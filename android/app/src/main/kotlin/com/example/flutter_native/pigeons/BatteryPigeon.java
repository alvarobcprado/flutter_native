// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.flutter_native.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class BatteryPigeon {

  public enum BatteryState {
    UNKNOWN(0),
    CHARGING(1),
    FULL(2),
    DISCHARGING(3);

    private int index;
    private BatteryState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class BatteryInfo {
    private @NonNull Long level;
    public @NonNull Long getLevel() { return level; }
    public void setLevel(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"level\" is null.");
      }
      this.level = setterArg;
    }

    private @NonNull BatteryState state;
    public @NonNull BatteryState getState() { return state; }
    public void setState(@NonNull BatteryState setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"state\" is null.");
      }
      this.state = setterArg;
    }

    /**Constructor is private to enforce null safety; use Builder. */
    private BatteryInfo() {}
    public static final class Builder {
      private @Nullable Long level;
      public @NonNull Builder setLevel(@NonNull Long setterArg) {
        this.level = setterArg;
        return this;
      }
      private @Nullable BatteryState state;
      public @NonNull Builder setState(@NonNull BatteryState setterArg) {
        this.state = setterArg;
        return this;
      }
      public @NonNull BatteryInfo build() {
        BatteryInfo pigeonReturn = new BatteryInfo();
        pigeonReturn.setLevel(level);
        pigeonReturn.setState(state);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("level", level);
      toMapResult.put("state", state == null ? null : state.index);
      return toMapResult;
    }
    static @NonNull BatteryInfo fromMap(@NonNull Map<String, Object> map) {
      BatteryInfo pigeonResult = new BatteryInfo();
      Object level = map.get("level");
      pigeonResult.setLevel((level == null) ? null : ((level instanceof Integer) ? (Integer)level : (Long)level));
      Object state = map.get("state");
      pigeonResult.setState(state == null ? null : BatteryState.values()[(int)state]);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class BatteryApiCodec extends StandardMessageCodec {
    public static final BatteryApiCodec INSTANCE = new BatteryApiCodec();
    private BatteryApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return BatteryInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof BatteryInfo) {
        stream.write(128);
        writeValue(stream, ((BatteryInfo) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface BatteryApi {
    void getBatteryInfo(Result<BatteryInfo> result);

    /** The codec used by BatteryApi. */
    static MessageCodec<Object> getCodec() {
      return       BatteryApiCodec.INSTANCE;    }
    /**Sets up an instance of `BatteryApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BatteryApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BatteryApi.getBatteryInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<BatteryInfo> resultCallback = new Result<BatteryInfo>() {
                public void success(BatteryInfo result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getBatteryInfo(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
